CMAKE_MINIMUM_REQUIRED(VERSION 3.25)

FIND_PACKAGE(Git)

EXECUTE_PROCESS(
    COMMAND ${CMAKE_COMMAND} -D SRC=${CMAKE_SOURCE_DIR}/inc/version.h.in -D DST=${CMAKE_BINARY_DIR}/version.h -D GIT_EXECUTABLE=${GIT_EXECUTABLE} -P ${CMAKE_SOURCE_DIR}/cmake/version.cmake
    OUTPUT_VARIABLE IMAGES_VERSION
    OUTPUT_STRIP_TRAILING_WHITESPACE
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
)

PROJECT(
    ImagesLoader
    LANGUAGES CXX
    VERSION ${IMAGES_VERSION}
)

OPTION(BUILD_EMSCRIPTEN "Build for Emscripten" OFF)

MESSAGE(STATUS "Project: ${PROJECT_NAME} - v${PROJECT_VERSION}")

IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE Release)
ENDIF()

IF(BUILD_EMSCRIPTEN)
    ADD_DEFINITIONS(-DUSE_EMSCRIPTEN)
ELSE()
    INCLUDE(cmake/conan.cmake)
ENDIF()

FIND_PACKAGE(JPEG REQUIRED)
FIND_PACKAGE(PNG REQUIRED)
FIND_PACKAGE(WebP REQUIRED)

# INCLUDES
INCLUDE_DIRECTORIES(inc)
INCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR})
INCLUDE_DIRECTORIES(${JPEG_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${PNG_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${WebP_INCLUDE_DIRS})

# GET THE SOURCE FILE
FILE(GLOB_RECURSE HDRS inc/*.h)
FILE(GLOB_RECURSE SRCS src/*.cpp)

ADD_EXECUTABLE(${PROJECT_NAME} ${HDRS} ${SRCS})

TARGET_LINK_LIBRARIES(${PROJECT_NAME} WebP::WebP)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PNG::PNG)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} JPEG::JPEG)
